name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}:${{ github.sha }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry
    - name: Install dependencies
      run: |
        poetry install --no-root
    - name: Run linters
      run: |
        poetry run black --check app/
        poetry run flake8 app/
        

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry
    - name: Install dependencies
      run: |
        poetry install --no-root
    - name: Run tests
      run: poetry run python -m unittest discover tests

  build-and-push:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying ${{ env.DOCKER_IMAGE }} to production"
        # Add your deployment commands here
        # For example, you might use SSH to connect to your server and pull/run the new Docker image
        # ssh user@your-server "docker pull ${{ env.DOCKER_IMAGE }} && docker stop your-container && docker run -d --name your-container ${{ env.DOCKER_IMAGE }}"